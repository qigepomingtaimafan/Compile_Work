!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSIGN	morphology.cpp	25;"	d	file:
BEGIN	morphology.cpp	6;"	d	file:
CONSTANT	morphology.cpp	16;"	d	file:
Concat	morphology.cpp	/^void Words::Concat()$/;"	f	class:Words
Constant	morphology.cpp	/^int Words::Constant()$/;"	f	class:Words
CreateWord	morphology.cpp	/^Word* Words::CreateWord(int val,string s)$/;"	f	class:Words
Digit	morphology.cpp	/^bool Words::Digit()$/;"	f	class:Words
E	morphology.cpp	17;"	d	file:
ELSE	morphology.cpp	11;"	d	file:
END	morphology.cpp	7;"	d	file:
Error	morphology.cpp	/^void Words::Error(int kind)$/;"	f	class:Words
F	a.pas	/^  integer function F(n);$/;"	f
FUNCTION	morphology.cpp	12;"	d	file:
G	morphology.cpp	22;"	d	file:
GE	morphology.cpp	21;"	d	file:
GetChar	morphology.cpp	/^void Words::GetChar()$/;"	f	class:Words
GetS	morphology.h	/^        string GetS(){return s;}$/;"	f	class:Word
GetVal	morphology.h	/^        int GetVal(){return val;}$/;"	f	class:Word
Getnbc	morphology.cpp	/^void Words::Getnbc()$/;"	f	class:Words
IF	morphology.cpp	9;"	d	file:
INT	morphology.cpp	8;"	d	file:
InitReserveMap	morphology.cpp	/^void Words::InitReserveMap()$/;"	f	class:Words
IsComplete	morphology.h	/^        bool IsComplete(){return complete;}$/;"	f	class:Words
L	morphology.cpp	20;"	d	file:
LE	morphology.cpp	19;"	d	file:
LINE	mmain.cpp	6;"	d	file:
LPAR	morphology.cpp	26;"	d	file:
Letter	morphology.cpp	/^bool Words::Letter()$/;"	f	class:Words
LexAnalyze	morphology.cpp	/^Word* Words::LexAnalyze()$/;"	f	class:Words
MUL	morphology.cpp	24;"	d	file:
NE	morphology.cpp	18;"	d	file:
READ	morphology.cpp	13;"	d	file:
RPAR	morphology.cpp	27;"	d	file:
Reserve	morphology.cpp	/^int Words::Reserve()$/;"	f	class:Words
Retract	morphology.cpp	/^void Words::Retract()$/;"	f	class:Words
SEM	morphology.cpp	28;"	d	file:
SUB	morphology.cpp	23;"	d	file:
SYMBOL	morphology.cpp	15;"	d	file:
SetErr	morphology.cpp	/^bool Words::SetErr(string errS)$/;"	f	class:Words
SetInput	morphology.h	/^        void SetInput(string &s){input = s.begin();}$/;"	f	class:Words
SetLineNum	morphology.h	/^        void SetLineNum(int lineNum){this->lineNum = lineNum;}$/;"	f	class:Words
Symbol	morphology.cpp	/^int Words::Symbol()$/;"	f	class:Words
THEN	morphology.cpp	10;"	d	file:
WRITE	morphology.cpp	14;"	d	file:
Word	morphology.h	/^        Word(int val,string s){this->s = s;this->val = val;}$/;"	f	class:Word
Word	morphology.h	/^class Word$/;"	c
Words	morphology.h	/^        Words(){InitReserveMap();complete = true;}$/;"	f	class:Words
Words	morphology.h	/^class Words$/;"	c
character	morphology.h	/^        char character;$/;"	m	class:Words
complete	morphology.h	/^        bool complete;$/;"	m	class:Words
constantMap	morphology.h	/^        map<string,int> constantMap;$/;"	m	class:Words
err	morphology.h	/^        ofstream err;$/;"	m	class:Words
input	morphology.h	/^        string::iterator input; $/;"	m	class:Words
lineNum	morphology.h	/^        int lineNum;$/;"	m	class:Words
main	mmain.cpp	/^int main()$/;"	f
reserveMap	morphology.h	/^        map<string,int> reserveMap;$/;"	m	class:Words
s	morphology.h	/^        string  s;$/;"	m	class:Word
symbolMap	morphology.h	/^        map<string,int> symbolMap;$/;"	m	class:Words
token	morphology.h	/^        string token;$/;"	m	class:Words
val	morphology.h	/^        int val;$/;"	m	class:Word
